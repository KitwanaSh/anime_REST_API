# Generated by Django 5.0.6 on 2024-05-14 15:55

import core.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('registration_method', models.CharField(choices=[('email', 'Email'), ('google', 'Google')], default='email', max_length=10)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_merchant', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MerchantProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=core.models.profile_image_file)),
                ('merchant_name', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('message', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_recipient', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('successful', 'successful'), ('failed', 'failed')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='checkout_cart', to='core.cart')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkout_user', to=settings.AUTH_USER_MODEL)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkout_payment', to='core.payment')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('product_name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(max_length=255)),
                ('category', models.CharField(choices=[('electronics', 'Electronics'), ('clothing_apparel', 'Clothing & Apparel'), ('home_kitchen', 'Home & Kitchen'), ('health_personal_care', 'Health & Personal Care'), ('beauty_cosmetics', 'Beauty & Cosmetics'), ('books_literature', 'Books & Literature'), ('toys_games', 'Toys & Games'), ('sports_outdoors', 'Sports & Outdoors'), ('automotive_motorcycles', 'Automotive & Motorcycles'), ('furniture_decor', 'Furniture & Decor'), ('jewelry_watches', 'Jewelry & Watches'), ('baby_toddler', 'Baby & Toddler'), ('pet_supplies', 'Pet Supplies'), ('food_grocery', 'Food & Grocery'), ('tools_home_improvement', 'Tools & Home Improvement'), ('office_supplies', 'Office Supplies'), ('arts_crafts', 'Arts & Crafts'), ('musical_instruments', 'Musical Instruments'), ('garden_outdoor', 'Garden & Outdoor'), ('luggage_travel', 'Luggage & Travel'), ('fitness_exercise', 'Fitness & Exercise'), ('party_supplies', 'Party Supplies'), ('electronics_accessories', 'Electronics Accessories'), ('stationery_writing_supplies', 'Stationery & Writing Supplies'), ('appliances', 'Appliances'), ('video_games_consoles', 'Video Games & Consoles'), ('cameras_photography', 'Cameras & Photography'), ('computer_accessories', 'Computer Accessories'), ('cell_phones_accessories', 'Cell Phones & Accessories'), ('audio_headphones', 'Audio & Headphones'), ('software', 'Software'), ('movies_tv_shows', 'Movies & TV Shows'), ('collectibles_memorabilia', 'Collectibles & Memorabilia'), ('shoes_footwear', 'Shoes & Footwear'), ('bags_backpacks', 'Bags & Backpacks'), ('watches_wearable_technology', 'Watches & Wearable Technology'), ('sunglasses_eyewear', 'Sunglasses & Eyewear'), ('hats_caps', 'Hats & Caps'), ('scarves_wraps', 'Scarves & Wraps'), ('gloves_mittens', 'Gloves & Mittens'), ('socks_hosiery', 'Socks & Hosiery'), ('belts_buckles', 'Belts & Buckles'), ('wallets_cardholders', 'Wallets & Cardholders'), ('perfumes_fragrances', 'Perfumes & Fragrances'), ('skincare_bath', 'Skincare & Bath'), ('haircare_styling', 'Haircare & Styling'), ('makeup_cosmetics', 'Makeup & Cosmetics'), ('nail_care_polish', 'Nail Care & Polish'), ('dental_care', 'Dental Care'), ('shaving_grooming', 'Shaving & Grooming'), ('vitamins_supplements', 'Vitamins & Supplements'), ('first_aid_medical_supplies', 'First Aid & Medical Supplies'), ('allergy_sinus', 'Allergy & Sinus'), ('pain_relief_management', 'Pain Relief & Management'), ('sexual_wellness', 'Sexual Wellness'), ('books', 'Books'), ('magazines', 'Magazines'), ('audiobooks', 'Audiobooks'), ('ebooks', 'E-books'), ('educational_toys_games', 'Educational Toys & Games'), ('building_toys', 'Building Toys'), ('dolls_accessories', 'Dolls & Accessories'), ('action_figures', 'Action Figures'), ('board_games', 'Board Games'), ('card_games', 'Card Games'), ('puzzles', 'Puzzles'), ('outdoor_play_equipment', 'Outdoor Play Equipment'), ('camping_hiking_gear', 'Camping & Hiking Gear'), ('cycling_accessories', 'Cycling Accessories'), ('fishing_gear', 'Fishing Gear'), ('hunting_equipment', 'Hunting Equipment'), ('exercise_fitness_equipment', 'Exercise & Fitness Equipment'), ('gymnastics_yoga_equipment', 'Gymnastics & Yoga Equipment'), ('team_sports_equipment', 'Team Sports Equipment'), ('athletic_apparel', 'Athletic Apparel'), ('sports_shoes', 'Sports Shoes'), ('camping_furniture', 'Camping Furniture'), ('outdoor_cooking_equipment', 'Outdoor Cooking Equipment'), ('gardening_tools', 'Gardening Tools'), ('patio_furniture', 'Patio Furniture'), ('pool_spa_supplies', 'Pool & Spa Supplies'), ('party_decorations', 'Party Decorations'), ('party_favors', 'Party Favors'), ('party_games', 'Party Games'), ('baking_supplies', 'Baking Supplies'), ('cooking_utensils', 'Cooking Utensils'), ('small_appliances', 'Small Appliances'), ('cookware_bakeware', 'Cookware & Bakeware'), ('kitchen_storage_organization', 'Kitchen Storage & Organization'), ('tableware_serveware', 'Tableware & Serveware'), ('bedding_linens', 'Bedding & Linens'), ('bathroom_accessories', 'Bathroom Accessories'), ('home_decor_accents', 'Home Decor Accents'), ('lighting_fixtures', 'Lighting Fixtures'), ('wall_art_mirrors', 'Wall Art & Mirrors'), ('rugs_carpets', 'Rugs & Carpets'), ('curtains_window_treatments', 'Curtains & Window Treatments'), ('furniture_hardware', 'Furniture Hardware'), ('indoor_plants_planters', 'Indoor Plants & Planters'), ('fireplaces_accessories', 'Fireplaces & Accessories')], max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product_image', models.ImageField(blank=True, null=True, upload_to=core.models.product_image_file)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_merchant', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='core.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(through='core.CartItem', to='core.product'),
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('rating', models.PositiveSmallIntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productReviews_product', to='core.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productReviews_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('products', models.ManyToManyField(to='core.product')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
